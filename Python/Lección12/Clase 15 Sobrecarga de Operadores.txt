Básicamente, la sobrecarga de un operador 
significa que un mismo operador puede 
comportarse de diferentes formas.

Por ejemplo, el operador de suma (+)

El operador de suma es un buen ejemplo 
de la sobrecarga de operadores.

Este operador se puede comportar de 
maneras distintas dependiendo si está 
trabajando con tipos string,

con tipos enteros o por ejemplo con tipos 
lista.

Así que dependiendo del tipo con el que 
esté trabajando, es el tipo de resultado 
que vamos a obtener.

Por lo tanto, un mismo operador puede 
trabajar de distintas formas.

Esto se conoce como sobrecarga de operadores.

Caso 1                            Caso 2

a = 2                             a = 'Hola '
b = 3                             b = 'Mundo'
print(a + b)                      print(a + b)

En ese segundo caso, en lugar de obtener 
una suma, obtenemos una concatenación de 
tipos string de tipos cadena, y entonces 
con eso estamos obteniendo la sobrecarga 
del operador.

Si tenemos tipos numéricos, se comporta de 
una forma, y si tenemos tipos strings se 
comporta de otra forma.

Agregamos unas listas:

a = [3, 4, 5]
b = [6, 7, 8, 9]
print(a + b)

Se va a comportar de manera diferente, 
obtenemos la unión de las dos listas,
creando una sola.

Es el mismo operador, pero dependiendo del 
tipo de dato con el que estemos trabajando 
va a ser el resultado.


Ahora la pregunta es si esto mismo lo 
podemos hacer con clases en Python.

Y la respuesta es que sí, pero tenemos 
que agregar la sobrecarga de un método 
dependiendo del operador que queramos 
sobrecargar.

Por ejemplo, esta es la lista de métodos 
según el operador que queramos sobrecargar.
Todos están definidos en la clase object

   Operadores Aritmeticos          magic method
 +                            __add__(self, other)
 -                            __sub__(self, other)
 *                            __mul__(self, other)
 /                            __truediv__(self, other)
 //                           __floordiv__(self, other)
 %                            __mod__(self, other)
 **                           __pow__(self, other)

   Operador Comparación (lógicos)
 <                            __lt__(self, other)
 >                            __gt__(self, other)
 <=                           __le__(self, other)
 >=                           __ge__(self, other)
 ==                           __eq__(self, other)
 !=                           __ne__(self, other)


Entonces tenemos que sobreescribir el método 
respectivo definido en la clase Object.

En ese caso, si queremos sobrecargar la suma, 
entonces tenemos que sobreescribir el método 
de add.

Todos son métodos de tipo dunder.

Esto quiere decir que está definido en la 
clase Object.

Si queremos sobrecargar el operador de resta, 
entonces tenemos que sobreescribir el método 
de sub.

Ahora, la sobrecarga y la sobreescritura son dos 
conceptos diferentes.

Recordemos que la sobrecarga de un operador 
significa que se puede comportar de maneras 
distintas dependiendo de los operandos con 
los cuales esté trabajando y la sobreescritura 
tiene que ver con herencia.

Así que en este caso estaríamos sobreescribiendo 
un método definido en una clase padre.

Así que son conceptos muy distintos.

La sobrecarga de operadores y la sobreescritura 
de métodos.

Operadores de asignación(compuestos)   magic method
 -=                            __isub__(self, other)
 +=                            __iadd__(self, other)
 *=                            __imul__(self, other)
 /=                            __idiv__(self, other)
 //=                           __ifloordiv__(self, other)
 %=                            __imod__(self, other)
 **=                           __ipow__(self, other)

Aquí están todas estas tablas con todos los 
operadores que podemos sobrecargar.

Por ejemplo, tenemos también más operadores, 
como pueden ser los operadores de menor que, mayor 
que, menor, igual que etcétera.

También los operadores, como pueden ser operadores 
compuestos de menor, igual, mayor igual, etcétera.

Y también los operadores unarios con los cuales 
solamente trabajamos con un solo operando.

   Operadores Unarios            magic method
 -                             __neg__(self, other)
 +                             __pos__(self, other)
 ~                             __invert__(self, other)

Así que les voy a entregar esta tabla en caso 
de que necesiten sobrecargar alguno de estos operadores.

Ya saben cuál es el método que tienen que 
sobreescribir de la clase Object.